//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./apis/datadoghq/v1alpha1.APMSpec":                                 schema__apis_datadoghq_v1alpha1_APMSpec(ref),
		"./apis/datadoghq/v1alpha1.APMUnixDomainSocketSpec":                 schema__apis_datadoghq_v1alpha1_APMUnixDomainSocketSpec(ref),
		"./apis/datadoghq/v1alpha1.AdmissionControllerConfig":               schema__apis_datadoghq_v1alpha1_AdmissionControllerConfig(ref),
		"./apis/datadoghq/v1alpha1.AgentCredentials":                        schema__apis_datadoghq_v1alpha1_AgentCredentials(ref),
		"./apis/datadoghq/v1alpha1.CRISocketConfig":                         schema__apis_datadoghq_v1alpha1_CRISocketConfig(ref),
		"./apis/datadoghq/v1alpha1.ClusterAgentConfig":                      schema__apis_datadoghq_v1alpha1_ClusterAgentConfig(ref),
		"./apis/datadoghq/v1alpha1.ClusterChecksRunnerConfig":               schema__apis_datadoghq_v1alpha1_ClusterChecksRunnerConfig(ref),
		"./apis/datadoghq/v1alpha1.ComplianceSpec":                          schema__apis_datadoghq_v1alpha1_ComplianceSpec(ref),
		"./apis/datadoghq/v1alpha1.ConfigDirSpec":                           schema__apis_datadoghq_v1alpha1_ConfigDirSpec(ref),
		"./apis/datadoghq/v1alpha1.ConfigFileConfigMapSpec":                 schema__apis_datadoghq_v1alpha1_ConfigFileConfigMapSpec(ref),
		"./apis/datadoghq/v1alpha1.CustomConfigSpec":                        schema__apis_datadoghq_v1alpha1_CustomConfigSpec(ref),
		"./apis/datadoghq/v1alpha1.DSDUnixDomainSocketSpec":                 schema__apis_datadoghq_v1alpha1_DSDUnixDomainSocketSpec(ref),
		"./apis/datadoghq/v1alpha1.DaemonSetDeploymentStrategy":             schema__apis_datadoghq_v1alpha1_DaemonSetDeploymentStrategy(ref),
		"./apis/datadoghq/v1alpha1.DaemonSetRollingUpdateSpec":              schema__apis_datadoghq_v1alpha1_DaemonSetRollingUpdateSpec(ref),
		"./apis/datadoghq/v1alpha1.DaemonSetStatus":                         schema__apis_datadoghq_v1alpha1_DaemonSetStatus(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgent":                            schema__apis_datadoghq_v1alpha1_DatadogAgent(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentCondition":                   schema__apis_datadoghq_v1alpha1_DatadogAgentCondition(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentSpec":                        schema__apis_datadoghq_v1alpha1_DatadogAgentSpec(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentSpecAgentSpec":               schema__apis_datadoghq_v1alpha1_DatadogAgentSpecAgentSpec(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentSpecClusterAgentSpec":        schema__apis_datadoghq_v1alpha1_DatadogAgentSpecClusterAgentSpec(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentSpecClusterChecksRunnerSpec": schema__apis_datadoghq_v1alpha1_DatadogAgentSpecClusterChecksRunnerSpec(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentStatus":                      schema__apis_datadoghq_v1alpha1_DatadogAgentStatus(ref),
		"./apis/datadoghq/v1alpha1.DatadogCredentials":                      schema__apis_datadoghq_v1alpha1_DatadogCredentials(ref),
		"./apis/datadoghq/v1alpha1.DatadogFeatures":                         schema__apis_datadoghq_v1alpha1_DatadogFeatures(ref),
		"./apis/datadoghq/v1alpha1.DatadogMetric":                           schema__apis_datadoghq_v1alpha1_DatadogMetric(ref),
		"./apis/datadoghq/v1alpha1.DatadogMetricCondition":                  schema__apis_datadoghq_v1alpha1_DatadogMetricCondition(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitor":                          schema__apis_datadoghq_v1alpha1_DatadogMonitor(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorCondition":                 schema__apis_datadoghq_v1alpha1_DatadogMonitorCondition(ref),
		"./apis/datadoghq/v1alpha1.DeploymentStatus":                        schema__apis_datadoghq_v1alpha1_DeploymentStatus(ref),
		"./apis/datadoghq/v1alpha1.DogstatsdConfig":                         schema__apis_datadoghq_v1alpha1_DogstatsdConfig(ref),
		"./apis/datadoghq/v1alpha1.ExternalMetricsConfig":                   schema__apis_datadoghq_v1alpha1_ExternalMetricsConfig(ref),
		"./apis/datadoghq/v1alpha1.ImageConfig":                             schema__apis_datadoghq_v1alpha1_ImageConfig(ref),
		"./apis/datadoghq/v1alpha1.KubeStateMetricsCore":                    schema__apis_datadoghq_v1alpha1_KubeStateMetricsCore(ref),
		"./apis/datadoghq/v1alpha1.KubeletConfig":                           schema__apis_datadoghq_v1alpha1_KubeletConfig(ref),
		"./apis/datadoghq/v1alpha1.LocalService":                            schema__apis_datadoghq_v1alpha1_LocalService(ref),
		"./apis/datadoghq/v1alpha1.LogCollectionConfig":                     schema__apis_datadoghq_v1alpha1_LogCollectionConfig(ref),
		"./apis/datadoghq/v1alpha1.NetworkPolicySpec":                       schema__apis_datadoghq_v1alpha1_NetworkPolicySpec(ref),
		"./apis/datadoghq/v1alpha1.NodeAgentConfig":                         schema__apis_datadoghq_v1alpha1_NodeAgentConfig(ref),
		"./apis/datadoghq/v1alpha1.OrchestratorExplorerConfig":              schema__apis_datadoghq_v1alpha1_OrchestratorExplorerConfig(ref),
		"./apis/datadoghq/v1alpha1.ProcessSpec":                             schema__apis_datadoghq_v1alpha1_ProcessSpec(ref),
		"./apis/datadoghq/v1alpha1.PrometheusScrapeConfig":                  schema__apis_datadoghq_v1alpha1_PrometheusScrapeConfig(ref),
		"./apis/datadoghq/v1alpha1.RbacConfig":                              schema__apis_datadoghq_v1alpha1_RbacConfig(ref),
		"./apis/datadoghq/v1alpha1.RuntimeSecuritySpec":                     schema__apis_datadoghq_v1alpha1_RuntimeSecuritySpec(ref),
		"./apis/datadoghq/v1alpha1.Secret":                                  schema__apis_datadoghq_v1alpha1_Secret(ref),
		"./apis/datadoghq/v1alpha1.SecuritySpec":                            schema__apis_datadoghq_v1alpha1_SecuritySpec(ref),
		"./apis/datadoghq/v1alpha1.SyscallMonitorSpec":                      schema__apis_datadoghq_v1alpha1_SyscallMonitorSpec(ref),
		"./apis/datadoghq/v1alpha1.SystemProbeSpec":                         schema__apis_datadoghq_v1alpha1_SystemProbeSpec(ref),
	}
}

func schema__apis_datadoghq_v1alpha1_APMSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APMSpec contains the Trace Agent configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this to enable APM and tracing, on port 8126. See also: https://github.com/DataDog/docker-dd-agent#tracing-from-the-host",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"unixDomainSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "UnixDomainSocket socket configuration. See also: https://docs.datadoghq.com/agent/kubernetes/apm/?tab=helm#agent-environment-variables",
							Ref:         ref("./apis/datadoghq/v1alpha1.APMUnixDomainSocketSpec"),
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog Agent supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the APM Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog APM Agent resource requests and limits. Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class. See also: http://kubernetes.io/docs/user-guide/compute-resources/",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for Trace Agent container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Liveness Probe of the APM container",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.APMUnixDomainSocketSpec", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema__apis_datadoghq_v1alpha1_APMUnixDomainSocketSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "APMUnixDomainSocketSpec contains the APM Unix Domain Socket configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable APM over Unix Domain Socket See also: https://docs.datadoghq.com/agent/kubernetes/apm/?tab=helm#agent-environment-variables",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostFilepath": {
						SchemaProps: spec.SchemaProps{
							Description: "Define the host APM socket filepath used when APM over Unix Domain Socket is enabled. (default value: /var/run/datadog/apm.sock) See also: https://docs.datadoghq.com/agent/kubernetes/apm/?tab=helm#agent-environment-variables",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_AdmissionControllerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AdmissionControllerConfig contains the configuration of the admission controller in Cluster Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable the admission controller to be able to inject APM/Dogstatsd config and standard tags (env, service, version) automatically into your pods.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"mutateUnlabelled": {
						SchemaProps: spec.SchemaProps{
							Description: "MutateUnlabelled enables injecting config without having the pod label 'admission.datadoghq.com/enabled=\"true\"'.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"serviceName": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceName corresponds to the webhook service name.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"agentCommunicationMode": {
						SchemaProps: spec.SchemaProps{
							Description: "agentCommunicationMode corresponds to the mode used by the Datadog application libraries to communicate with the Agent. It can be \"hostip\", \"service\", or \"socket\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_AgentCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "AgentCredentials contains credentials values to configure the Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiKey": {
						SchemaProps: spec.SchemaProps{
							Description: "APIKey Set this to your Datadog API key before the Agent runs. See also: https://app.datadoghq.com/account/settings#agent/kubernetes",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiKeyExistingSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "APIKeyExistingSecret is DEPRECATED. In order to pass the API key through an existing secret, please consider \"apiSecret\" instead. If set, this parameter takes precedence over \"apiKey\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "APISecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over \"apiKey\" and \"apiKeyExistingSecret\".",
							Ref:         ref("./apis/datadoghq/v1alpha1.Secret"),
						},
					},
					"appKey": {
						SchemaProps: spec.SchemaProps{
							Description: "If you are using clusterAgent.metricsProvider.enabled = true, you must set a Datadog application key for read access to your metrics.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appKeyExistingSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "AppKeyExistingSecret is DEPRECATED. In order to pass the APP key through an existing secret, please consider \"appSecret\" instead. If set, this parameter takes precedence over \"appKey\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "APPSecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over \"apiKey\" and \"appKeyExistingSecret\".",
							Ref:         ref("./apis/datadoghq/v1alpha1.Secret"),
						},
					},
					"token": {
						SchemaProps: spec.SchemaProps{
							Description: "This needs to be at least 32 characters a-zA-z. It is a preshared key between the node agents and the cluster agent.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"useSecretBackend": {
						SchemaProps: spec.SchemaProps{
							Description: "UseSecretBackend use the Agent secret backend feature for retreiving all credentials needed by the different components: Agent, Cluster, Cluster-Checks. default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.Secret"},
	}
}

func schema__apis_datadoghq_v1alpha1_CRISocketConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CRISocketConfig contains the CRI socket configuration parameters.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dockerSocketPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to the docker runtime socket.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"criSocketPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path to the container runtime socket (if different from Docker). This is supported starting from agent 6.6.0.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_ClusterAgentConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterAgentConfig contains the configuration of the Cluster Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod-level SecurityContext.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"externalMetrics": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./apis/datadoghq/v1alpha1.ExternalMetricsConfig"),
						},
					},
					"admissionController": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Admission Controller.",
							Ref:         ref("./apis/datadoghq/v1alpha1.AdmissionControllerConfig"),
						},
					},
					"clusterChecksEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable the Cluster Checks and Endpoint Checks feature on both the Cluster Agent and the daemonset. See also: https://docs.datadoghq.com/agent/cluster_agent/clusterchecks/ https://docs.datadoghq.com/agent/cluster_agent/endpointschecks/ Autodiscovery via Kube Service annotations is automatically enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"collectEvents": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this to start event collection from the kubernetes API. See also: https://docs.datadoghq.com/agent/cluster_agent/event_collection/",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"logLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog Cluster Agent resource requests and limits.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for Cluster Agent container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"confd": {
						SchemaProps: spec.SchemaProps{
							Description: "Confd Provide additional cluster check configurations. Each key will become a file in /conf.d. see https://docs.datadoghq.com/agent/autodiscovery/ for more details.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ConfigDirSpec"),
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog Agent supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the Datadog Cluster Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volumes in the Datadog Cluster Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"healthPort": {
						SchemaProps: spec.SchemaProps{
							Description: "HealthPort of the Agent container for internal liveness probe. Must be the same as the Liveness/Readiness probes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.AdmissionControllerConfig", "./apis/datadoghq/v1alpha1.ConfigDirSpec", "./apis/datadoghq/v1alpha1.ExternalMetricsConfig", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema__apis_datadoghq_v1alpha1_ClusterChecksRunnerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ClusterChecksRunnerConfig contains the configuration of the Cluster Checks Runner.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod-level SecurityContext.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog Cluster Checks Runner resource requests and limits.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for Cluster Checks Runner container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"logLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog Agent supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the Datadog Cluster Check Runner container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volumes in the Datadog Cluster Check Runner container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Liveness Probe of the CLC container",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Readiness Probe of the CLC container",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"healthPort": {
						SchemaProps: spec.SchemaProps{
							Description: "HealthPort of the Agent container for internal liveness probe. Must be the same as the Liveness/Readiness probes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema__apis_datadoghq_v1alpha1_ComplianceSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ComplianceSpec contains configuration for continuous compliance.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enables continuous compliance monitoring.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"checkInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "Check interval.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"configDir": {
						SchemaProps: spec.SchemaProps{
							Description: "Config dir containing compliance benchmarks.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ConfigDirSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.ConfigDirSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema__apis_datadoghq_v1alpha1_ConfigDirSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigDirSpec contains config file directory configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configMapName": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigMapName name of a ConfigMap used to mount a directory.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"items": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"key",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "items mapping between configMap data key and file path mount.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.KeyToPath"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.KeyToPath"},
	}
}

func schema__apis_datadoghq_v1alpha1_ConfigFileConfigMapSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ConfigFileConfigMapSpec contains configMap information used to store a config file.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of source ConfigMap.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"fileKey": {
						SchemaProps: spec.SchemaProps{
							Description: "FileKey corresponds to the key used in the ConfigMap.Data to store the configuration file content.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_CustomConfigSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CustomConfigSpec Allow to put custom configuration for the agent, corresponding to the datadog-cluster.yaml or datadog.yaml config file the configuration can be provided in the 'configData' field as raw data, or in a configmap thanks to `configMap` field. Important: `configData` and `configMap` can't be set together.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"configData": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigData corresponds to the configuration file content.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configMap": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable to specify a reference to an already existing ConfigMap.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ConfigFileConfigMapSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.ConfigFileConfigMapSpec"},
	}
}

func schema__apis_datadoghq_v1alpha1_DSDUnixDomainSocketSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DSDUnixDomainSocketSpec contains the Dogstatsd Unix Domain Socket configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable APM over Unix Domain Socket. See also: https://docs.datadoghq.com/developers/dogstatsd/unix_socket/",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostFilepath": {
						SchemaProps: spec.SchemaProps{
							Description: "Define the host APM socket filepath used when APM over Unix Domain Socket is enabled. (default value: /var/run/datadog/statsd.sock). See also: https://docs.datadoghq.com/developers/dogstatsd/unix_socket/",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DaemonSetDeploymentStrategy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DaemonSetDeploymentStrategy contains the node Agent deployment configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"updateStrategyType": {
						SchemaProps: spec.SchemaProps{
							Description: "The update strategy used for the DaemonSet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"rollingUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the rolling updater strategy of the DaemonSet or the ExtendedDaemonSet.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DaemonSetRollingUpdateSpec"),
						},
					},
					"canary": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the canary deployment configuration using ExtendedDaemonSet.",
							Ref:         ref("github.com/DataDog/extendeddaemonset/api/v1alpha1.ExtendedDaemonSetSpecStrategyCanary"),
						},
					},
					"reconcileFrequency": {
						SchemaProps: spec.SchemaProps{
							Description: "The reconcile frequency of the ExtendDaemonSet.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DaemonSetRollingUpdateSpec", "github.com/DataDog/extendeddaemonset/api/v1alpha1.ExtendedDaemonSetSpecStrategyCanary", "k8s.io/apimachinery/pkg/apis/meta/v1.Duration"},
	}
}

func schema__apis_datadoghq_v1alpha1_DaemonSetRollingUpdateSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DaemonSetRollingUpdateSpec contains configuration fields of the rolling update strategy. The configuration is shared between DaemonSet and ExtendedDaemonSet.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"maxUnavailable": {
						SchemaProps: spec.SchemaProps{
							Description: "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxPodSchedulerFailure": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxPodSchedulerFailure the maxinum number of not scheduled on its Node due to a scheduler failure: resource constraints. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
					"maxParallelPodCreation": {
						SchemaProps: spec.SchemaProps{
							Description: "The maxium number of pods created in parallel. Default value is 250.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"slowStartIntervalDuration": {
						SchemaProps: spec.SchemaProps{
							Description: "SlowStartIntervalDuration the duration between to 2 Default value is 1min.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Duration"),
						},
					},
					"slowStartAdditiveIncrease": {
						SchemaProps: spec.SchemaProps{
							Description: "SlowStartAdditiveIncrease Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Default value is 5.",
							Ref:         ref("k8s.io/apimachinery/pkg/util/intstr.IntOrString"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Duration", "k8s.io/apimachinery/pkg/util/intstr.IntOrString"},
	}
}

func schema__apis_datadoghq_v1alpha1_DaemonSetStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DaemonSetStatus defines the observed state of Agent running as DaemonSet.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"desired": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"current": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"ready": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"available": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"upToDate": {
						SchemaProps: spec.SchemaProps{
							Default: 0,
							Type:    []string{"integer"},
							Format:  "int32",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastUpdate": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"currentHash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"daemonsetName": {
						SchemaProps: spec.SchemaProps{
							Description: "DaemonsetName corresponds to the name of the created DaemonSet.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"desired", "current", "ready", "available", "upToDate"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgent(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgent Deployment with Datadog Operator.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogAgentSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogAgentStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogAgentSpec", "./apis/datadoghq/v1alpha1.DatadogAgentStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentCondition describes the state of a DatadogAgent at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of DatadogAgent condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentSpec defines the desired state of DatadogAgent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"credentials": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the credentials needed to run Agents. If not set, then the credentials set in the DatadogOperator will be used.",
							Ref:         ref("./apis/datadoghq/v1alpha1.AgentCredentials"),
						},
					},
					"features": {
						SchemaProps: spec.SchemaProps{
							Description: "Features running on the Agent and Cluster Agent.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogFeatures"),
						},
					},
					"agent": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired state of the Agent as an extended daemonset. Contains the Node Agent configuration and deployment strategy.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogAgentSpecAgentSpec"),
						},
					},
					"clusterAgent": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired state of the Cluster Agent as a deployment.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogAgentSpecClusterAgentSpec"),
						},
					},
					"clusterChecksRunner": {
						SchemaProps: spec.SchemaProps{
							Description: "The desired state of the Cluster Checks Runner as a deployment.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogAgentSpecClusterChecksRunnerSpec"),
						},
					},
					"clusterName": {
						SchemaProps: spec.SchemaProps{
							Description: "Set a unique cluster name to allow scoping hosts and Cluster Checks Runner easily.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"site": {
						SchemaProps: spec.SchemaProps{
							Description: "The site of the Datadog intake to send Agent data to. Set to 'datadoghq.eu' to send data to the EU site.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"registry": {
						SchemaProps: spec.SchemaProps{
							Description: "Registry to use for all Agent images (default gcr.io/datadoghq). Use public.ecr.aws/datadog for AWS Use docker.io/datadog for DockerHub",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.AgentCredentials", "./apis/datadoghq/v1alpha1.DatadogAgentSpecAgentSpec", "./apis/datadoghq/v1alpha1.DatadogAgentSpecClusterAgentSpec", "./apis/datadoghq/v1alpha1.DatadogAgentSpecClusterChecksRunnerSpec", "./apis/datadoghq/v1alpha1.DatadogFeatures"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentSpecAgentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentSpecAgentSpec defines the desired state of the node Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"useExtendedDaemonset": {
						SchemaProps: spec.SchemaProps{
							Description: "UseExtendedDaemonset use ExtendedDaemonset for Agent deployment. default value is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The container image of the Datadog Agent.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ImageConfig"),
						},
					},
					"daemonsetName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Daemonset to create or migrate from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Agent configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.NodeAgentConfig"),
						},
					},
					"rbac": {
						SchemaProps: spec.SchemaProps{
							Description: "RBAC configuration of the Agent.",
							Ref:         ref("./apis/datadoghq/v1alpha1.RbacConfig"),
						},
					},
					"deploymentStrategy": {
						SchemaProps: spec.SchemaProps{
							Description: "Update strategy configuration for the DaemonSet.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DaemonSetDeploymentStrategy"),
						},
					},
					"additionalAnnotations": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalAnnotations provide annotations that will be added to the Agent Pods.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"additionalLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalLabels provide labels that will be added to the Agent Pods.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"keepLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "KeepLabels allows the specification of labels not managed by the Operator that will be kept on Agent DaemonSet. All labels containing 'datadoghq.com' are always included. This field uses glob syntax.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keepAnnotations": {
						SchemaProps: spec.SchemaProps{
							Description: "KeepAnnotations allows the specification of annotations not managed by the Operator that will be kept on Agent DaemonSet. All annotations containing 'datadoghq.com' are always included. This field uses glob syntax.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dnsPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dnsConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
							Ref:         ref("k8s.io/api/core/v1.PodDNSConfig"),
						},
					},
					"hostNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostPID": {
						SchemaProps: spec.SchemaProps{
							Description: "Use the host's pid namespace. Optional: Default to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Environment variables for all Datadog Agents. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"apm": {
						SchemaProps: spec.SchemaProps{
							Description: "Trace Agent configuration",
							Ref:         ref("./apis/datadoghq/v1alpha1.APMSpec"),
						},
					},
					"log": {
						SchemaProps: spec.SchemaProps{
							Description: "Log Agent configuration",
							Ref:         ref("./apis/datadoghq/v1alpha1.LogCollectionConfig"),
						},
					},
					"process": {
						SchemaProps: spec.SchemaProps{
							Description: "Process Agent configuration",
							Ref:         ref("./apis/datadoghq/v1alpha1.ProcessSpec"),
						},
					},
					"systemProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "SystemProbe configuration",
							Ref:         ref("./apis/datadoghq/v1alpha1.SystemProbeSpec"),
						},
					},
					"security": {
						SchemaProps: spec.SchemaProps{
							Description: "Security Agent configuration",
							Ref:         ref("./apis/datadoghq/v1alpha1.SecuritySpec"),
						},
					},
					"customConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Allow to put custom configuration for the agent, corresponding to the datadog.yaml config file. See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
					"networkPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Provide Agent Network Policy configuration",
							Ref:         ref("./apis/datadoghq/v1alpha1.NetworkPolicySpec"),
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints.",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"localService": {
						SchemaProps: spec.SchemaProps{
							Description: "Options to customize the internal traffic policy service",
							Ref:         ref("./apis/datadoghq/v1alpha1.LocalService"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.APMSpec", "./apis/datadoghq/v1alpha1.CustomConfigSpec", "./apis/datadoghq/v1alpha1.DaemonSetDeploymentStrategy", "./apis/datadoghq/v1alpha1.ImageConfig", "./apis/datadoghq/v1alpha1.LocalService", "./apis/datadoghq/v1alpha1.LogCollectionConfig", "./apis/datadoghq/v1alpha1.NetworkPolicySpec", "./apis/datadoghq/v1alpha1.NodeAgentConfig", "./apis/datadoghq/v1alpha1.ProcessSpec", "./apis/datadoghq/v1alpha1.RbacConfig", "./apis/datadoghq/v1alpha1.SecuritySpec", "./apis/datadoghq/v1alpha1.SystemProbeSpec", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PodDNSConfig"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentSpecClusterAgentSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentSpecClusterAgentSpec defines the desired state of the cluster Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The container image of the Datadog Cluster Agent.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ImageConfig"),
						},
					},
					"deploymentName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the Cluster Agent Deployment to create or migrate from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Cluster Agent configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ClusterAgentConfig"),
						},
					},
					"customConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Allow to put custom configuration for the Agent, corresponding to the datadog-cluster.yaml config file.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
					"rbac": {
						SchemaProps: spec.SchemaProps{
							Description: "RBAC configuration of the Datadog Cluster Agent.",
							Ref:         ref("./apis/datadoghq/v1alpha1.RbacConfig"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of the Cluster Agent replicas.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"additionalAnnotations": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalAnnotations provide annotations that will be added to the Cluster Agent Pods.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"additionalLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalLabels provide labels that will be added to the Cluster Agent Pods.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"keepLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "KeepLabels allows the specification of labels not managed by the Operator that will be kept on ClusterAgent Deployment. All labels containing 'datadoghq.com' are always included. This field uses glob syntax.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keepAnnotations": {
						SchemaProps: spec.SchemaProps{
							Description: "KeepAnnotations allows the specification of annotations not managed by the Operator that will be kept on ClusterAgent Deployment. All annotations containing 'datadoghq.com' are always included. This field uses glob syntax.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints.",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the Cluster-Agent pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"networkPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Provide Cluster Agent Network Policy configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.NetworkPolicySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.ClusterAgentConfig", "./apis/datadoghq/v1alpha1.CustomConfigSpec", "./apis/datadoghq/v1alpha1.ImageConfig", "./apis/datadoghq/v1alpha1.NetworkPolicySpec", "./apis/datadoghq/v1alpha1.RbacConfig", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentSpecClusterChecksRunnerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentSpecClusterChecksRunnerSpec defines the desired state of the Cluster Checks Runner.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The container image of the Datadog Cluster Checks Runner.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ImageConfig"),
						},
					},
					"deploymentName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the cluster checks deployment to create or migrate from.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Description: "Agent configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ClusterChecksRunnerConfig"),
						},
					},
					"customConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Allow to put custom configuration for the Agent, corresponding to the datadog.yaml config file. See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
					"rbac": {
						SchemaProps: spec.SchemaProps{
							Description: "RBAC configuration of the Datadog Cluster Checks Runner.",
							Ref:         ref("./apis/datadoghq/v1alpha1.RbacConfig"),
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of the Cluster Checks Runner replicas.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"additionalAnnotations": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalAnnotations provide annotations that will be added to the cluster checks runner Pods.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"additionalLabels": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalLabels provide labels that will be added to the cluster checks runner Pods.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"priorityClassName": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"affinity": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the pod's scheduling constraints.",
							Ref:         ref("k8s.io/api/core/v1.Affinity"),
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the Cluster-Checks pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"networkPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "Provide Cluster Checks Runner Network Policy configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.NetworkPolicySpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.ClusterChecksRunnerConfig", "./apis/datadoghq/v1alpha1.CustomConfigSpec", "./apis/datadoghq/v1alpha1.ImageConfig", "./apis/datadoghq/v1alpha1.NetworkPolicySpec", "./apis/datadoghq/v1alpha1.RbacConfig", "k8s.io/api/core/v1.Affinity", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentStatus defines the observed state of DatadogAgent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"defaultOverride": {
						SchemaProps: spec.SchemaProps{
							Description: "DefaultOverride contains attributes that were not configured that the runtime defaulted.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogAgentSpec"),
						},
					},
					"agent": {
						SchemaProps: spec.SchemaProps{
							Description: "The actual state of the Agent as an extended daemonset.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DaemonSetStatus"),
						},
					},
					"clusterAgent": {
						SchemaProps: spec.SchemaProps{
							Description: "The actual state of the Cluster Agent as a deployment.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DeploymentStatus"),
						},
					},
					"clusterChecksRunner": {
						SchemaProps: spec.SchemaProps{
							Description: "The actual state of the Cluster Checks Runner as a deployment.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DeploymentStatus"),
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions Represents the latest available observations of a DatadogAgent's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("./apis/datadoghq/v1alpha1.DatadogAgentCondition"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DaemonSetStatus", "./apis/datadoghq/v1alpha1.DatadogAgentCondition", "./apis/datadoghq/v1alpha1.DatadogAgentSpec", "./apis/datadoghq/v1alpha1.DeploymentStatus"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogCredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogCredentials is a generic structure that holds credentials to access Datadog.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"apiKey": {
						SchemaProps: spec.SchemaProps{
							Description: "APIKey Set this to your Datadog API key before the Agent runs. See also: https://app.datadoghq.com/account/settings#agent/kubernetes",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiKeyExistingSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "APIKeyExistingSecret is DEPRECATED. In order to pass the API key through an existing secret, please consider \"apiSecret\" instead. If set, this parameter takes precedence over \"apiKey\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "APISecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over \"apiKey\" and \"apiKeyExistingSecret\".",
							Ref:         ref("./apis/datadoghq/v1alpha1.Secret"),
						},
					},
					"appKey": {
						SchemaProps: spec.SchemaProps{
							Description: "If you are using clusterAgent.metricsProvider.enabled = true, you must set a Datadog application key for read access to your metrics.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appKeyExistingSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "AppKeyExistingSecret is DEPRECATED. In order to pass the APP key through an existing secret, please consider \"appSecret\" instead. If set, this parameter takes precedence over \"appKey\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appSecret": {
						SchemaProps: spec.SchemaProps{
							Description: "APPSecret Use existing Secret which stores API key instead of creating a new one. If set, this parameter takes precedence over \"apiKey\" and \"appKeyExistingSecret\".",
							Ref:         ref("./apis/datadoghq/v1alpha1.Secret"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.Secret"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogFeatures(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogFeatures are Features running on the Agent and Cluster Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"orchestratorExplorer": {
						SchemaProps: spec.SchemaProps{
							Description: "OrchestratorExplorer configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.OrchestratorExplorerConfig"),
						},
					},
					"kubeStateMetricsCore": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeStateMetricsCore configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.KubeStateMetricsCore"),
						},
					},
					"prometheusScrape": {
						SchemaProps: spec.SchemaProps{
							Description: "PrometheusScrape configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.PrometheusScrapeConfig"),
						},
					},
					"networkMonitoring": {
						SchemaProps: spec.SchemaProps{
							Description: "NetworkMonitoring configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.NetworkMonitoringConfig"),
						},
					},
					"logCollection": {
						SchemaProps: spec.SchemaProps{
							Description: "LogCollection configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.LogCollectionConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.KubeStateMetricsCore", "./apis/datadoghq/v1alpha1.LogCollectionConfig", "./apis/datadoghq/v1alpha1.NetworkMonitoringConfig", "./apis/datadoghq/v1alpha1.OrchestratorExplorerConfig", "./apis/datadoghq/v1alpha1.PrometheusScrapeConfig"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMetric(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMetric allows autoscaling on arbitrary Datadog query",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMetricSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMetricStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMetricSpec", "./apis/datadoghq/v1alpha1.DatadogMetricStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMetricCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMetricCondition describes the state of a DatadogMetric at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of DatadogMetric condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitor allows to define and manage Monitors from your Kubernetes Cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMonitorSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMonitorStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMonitorSpec", "./apis/datadoghq/v1alpha1.DatadogMonitorStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorCondition describes the current state of a DatadogMonitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of DatadogMonitor condition",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DeploymentStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DeploymentStatus type representing the Cluster Agent Deployment status.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"updatedReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of non-terminated pods targeted by this deployment that have the desired template spec.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readyReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of ready pods targeted by this deployment.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"availableReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"unavailableReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"lastUpdate": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"currentHash": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"generatedToken": {
						SchemaProps: spec.SchemaProps{
							Description: "GeneratedToken corresponds to the generated token if any token was provided in the Credential configuration when ClusterAgent is enabled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status corresponds to the ClusterAgent deployment computed status.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Description: "State corresponds to the ClusterAgent deployment state.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"deploymentName": {
						SchemaProps: spec.SchemaProps{
							Description: "DeploymentName corresponds to the name of the Cluster Agent Deployment.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DogstatsdConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DogstatsdConfig contains the Dogstatsd configuration parameters.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"dogstatsdOriginDetection": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable origin detection for container tagging. See also: https://docs.datadoghq.com/developers/dogstatsd/unix_socket/#using-origin-detection-for-container-tagging",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"unixDomainSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Dogstatsd Unix Domain Socket. See also: https://docs.datadoghq.com/developers/dogstatsd/unix_socket/",
							Ref:         ref("./apis/datadoghq/v1alpha1.DSDUnixDomainSocketSpec"),
						},
					},
					"mapperProfiles": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Dogstasd Mapper Profiles. Can be passed as raw data or via a json encoded string in a config map. See also: https://docs.datadoghq.com/developers/dogstatsd/dogstatsd_mapper/",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.CustomConfigSpec", "./apis/datadoghq/v1alpha1.DSDUnixDomainSocketSpec"},
	}
}

func schema__apis_datadoghq_v1alpha1_ExternalMetricsConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ExternalMetricsConfig contains the configuration of the external metrics provider in Cluster Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable the metricsProvider to be able to scale based on metrics in Datadog.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"wpaController": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable informer and controller of the watermark pod autoscaler. NOTE: The WatermarkPodAutoscaler controller needs to be installed. See also: https://github.com/DataDog/watermarkpodautoscaler.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"useDatadogMetrics": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable usage of DatadogMetrics CRD (allow to scale on arbitrary queries).",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "If specified configures the metricsProvider external metrics service port.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Override the API endpoint for the external metrics server. Defaults to .spec.agent.config.ddUrl or \"https://app.datadoghq.com\" if that's empty.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"credentials": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog credentials used by external metrics server to query Datadog. If not set, the external metrics server uses the global .spec.Credentials",
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogCredentials"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogCredentials"},
	}
}

func schema__apis_datadoghq_v1alpha1_ImageConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ImageConfig Datadog Agent container image config.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Define the image to use: Use \"gcr.io/datadoghq/agent\" for Datadog Agent 7 Use \"datadog/dogstatsd\" for Standalone Datadog Agent DogStatsD Use \"gcr.io/datadoghq/cluster-agent\" for Datadog Cluster Agent Use \"agent\" with the registry and tag configurations for <registry>/agent:<tag> Use \"cluster-agent\" with the registry and tag configurations for <registry>/cluster-agent:<tag>",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tag": {
						SchemaProps: spec.SchemaProps{
							Description: "Define the image version to use: To be used if the Name field does not correspond to a full image string.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"jmxEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Define whether the Agent image should support JMX.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"pullPolicy": {
						SchemaProps: spec.SchemaProps{
							Description: "The Kubernetes pull policy: Use Always, Never or IfNotPresent.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pullSecrets": {
						SchemaProps: spec.SchemaProps{
							Description: "It is possible to specify docker registry credentials. See https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.LocalObjectReference"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.LocalObjectReference"},
	}
}

func schema__apis_datadoghq_v1alpha1_KubeStateMetricsCore(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeStateMetricsCore contains the required parameters to enable and override the configuration of the Kubernetes State Metrics Core check.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this to start the Kubernetes State Metrics Core check. Refer to https://docs.datadoghq.com/integrations/kubernetes_state_core",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"conf": {
						SchemaProps: spec.SchemaProps{
							Description: "To override the configuration for the default Kubernetes State Metrics Core check. Must point to a ConfigMap containing a valid cluster check configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
					"clusterCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterCheck configures the Kubernetes State Metrics Core check as a cluster check.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.CustomConfigSpec"},
	}
}

func schema__apis_datadoghq_v1alpha1_KubeletConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "KubeletConfig contains the Kubelet configuration parameters",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Override host used to contact Kubelet API (default to status.hostIP)",
							Ref:         ref("k8s.io/api/core/v1.EnvVarSource"),
						},
					},
					"tlsVerify": {
						SchemaProps: spec.SchemaProps{
							Description: "Toggle kubelet TLS verification (default to true)",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"hostCAPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path (on host) where the Kubelet CA certificate is stored",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"agentCAPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path (inside Agent containers) where the Kubelet CA certificate is stored Default to /var/run/host-kubelet-ca.crt if hostCAPath else /var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVarSource"},
	}
}

func schema__apis_datadoghq_v1alpha1_LocalService(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LocalService provides internal traffic policy service configuration",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"overrideName": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the internal traffic service to target the agent running on the local node",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"forceLocalServiceEnable": {
						SchemaProps: spec.SchemaProps{
							Description: "Force the creation of the internal traffic policy service to target the agent running on the local node. By default, the internal traffic service is created only on Kubernetes 1.22+ where the feature became beta and enabled by default. This option allows to force the creation of the internal traffic service on kubernetes 1.21 where the feature was alpha and required a feature gate to be explicitly enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_LogCollectionConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "LogCollectionConfig contains the Log Agent configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this option to activate Datadog Agent log collection. See also: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"logsConfigContainerCollectAll": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this option to allow log collection for all containers. See also: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"containerCollectUsingFiles": {
						SchemaProps: spec.SchemaProps{
							Description: "Collect logs from files in `/var/log/pods instead` of using the container runtime API. Collecting logs from files is usually the most efficient way of collecting logs. See also: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup Default is true",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"containerLogsPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows log collection from the container log path. Set to a different path if you are not using the Docker runtime. See also: https://docs.datadoghq.com/agent/kubernetes/daemonset_setup/?tab=k8sfile#create-manifest Defaults to `/var/lib/docker/containers`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"podLogsPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows log collection from pod log path. Defaults to `/var/log/pods`.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"containerSymlinksPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Allows the log collection to use symbolic links in this directory to validate container ID -> pod. Defaults to `/var/log/containers`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tempStoragePath": {
						SchemaProps: spec.SchemaProps{
							Description: "This path (always mounted from the host) is used by Datadog Agent to store information about processed log files. If the Datadog Agent is restarted, it starts tailing the log files immediately. Default to `/var/lib/datadog-agent/logs`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"openFilesLimit": {
						SchemaProps: spec.SchemaProps{
							Description: "Sets the maximum number of log files that the Datadog Agent tails. Increasing this limit can increase resource consumption of the Agent. See also: https://docs.datadoghq.com/agent/basic_agent_usage/kubernetes/#log-collection-setup Default is 100",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_NetworkPolicySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NetworkPolicySpec provides Network Policy configuration for the agents.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"create": {
						SchemaProps: spec.SchemaProps{
							Description: "If true, create a NetworkPolicy for the current agent.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"flavor": {
						SchemaProps: spec.SchemaProps{
							Description: "Which network policy to use. Can be `kubernetes` or `cilium`.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"dnsSelectorEndpoints": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Cilium selector of the DNS server entity.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"),
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.LabelSelector"},
	}
}

func schema__apis_datadoghq_v1alpha1_NodeAgentConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeAgentConfig contains the configuration of the Node Agent.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "Pod-level SecurityContext.",
							Ref:         ref("k8s.io/api/core/v1.PodSecurityContext"),
						},
					},
					"ddUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "The host of the Datadog intake server to send Agent data to, only set this option if you need the Agent to send data to a custom URL. Overrides the site setting defined in \"site\".",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"logLevel": {
						SchemaProps: spec.SchemaProps{
							Description: "Set logging verbosity, valid log levels are: trace, debug, info, warn, error, critical, and off",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"confd": {
						SchemaProps: spec.SchemaProps{
							Description: "Confd configuration allowing to specify config files for custom checks placed under /etc/datadog-agent/conf.d/. See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ConfigDirSpec"),
						},
					},
					"checksd": {
						SchemaProps: spec.SchemaProps{
							Description: "Checksd configuration allowing to specify custom checks placed under /etc/datadog-agent/checks.d/ See https://docs.datadoghq.com/agent/guide/agent-configuration-files/?tab=agentv6 for more details.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ConfigDirSpec"),
						},
					},
					"podLabelsAsTags": {
						SchemaProps: spec.SchemaProps{
							Description: "Provide a mapping of Kubernetes Labels to Datadog Tags. <KUBERNETES_LABEL>: <DATADOG_TAG_KEY>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"podAnnotationsAsTags": {
						SchemaProps: spec.SchemaProps{
							Description: "Provide a mapping of Kubernetes Annotations to Datadog Tags. <KUBERNETES_ANNOTATIONS>: <DATADOG_TAG_KEY>",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tags": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "List of tags to attach to every metric, event and service check collected by this Agent. Learn more about tagging: https://docs.datadoghq.com/tagging/",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"collectEvents": {
						SchemaProps: spec.SchemaProps{
							Description: "Enables this to start event collection from the Kubernetes API. See also: https://docs.datadoghq.com/agent/kubernetes/event_collection/",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"leaderElection": {
						SchemaProps: spec.SchemaProps{
							Description: "Enables leader election mechanism for event collection.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog Agent supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the Datadog Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"volumes": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volumes in the Datadog Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Volume"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog Agent resource requests and limits. Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class. See also: http://kubernetes.io/docs/user-guide/compute-resources/",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for the Agent container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"livenessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Liveness Probe of the Agent container",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"readinessProbe": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the Readiness Probe of the Agent container",
							Ref:         ref("k8s.io/api/core/v1.Probe"),
						},
					},
					"healthPort": {
						SchemaProps: spec.SchemaProps{
							Description: "HealthPort of the Agent container for internal liveness probe. Must be the same as the Liveness/Readiness probes.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"criSocket": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure the CRI Socket.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CRISocketConfig"),
						},
					},
					"dogstatsd": {
						SchemaProps: spec.SchemaProps{
							Description: "Configure Dogstatsd.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DogstatsdConfig"),
						},
					},
					"tolerations": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "If specified, the Agent pod's tolerations.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"hostPort": {
						SchemaProps: spec.SchemaProps{
							Description: "Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"kubelet": {
						SchemaProps: spec.SchemaProps{
							Description: "KubeletConfig contains the Kubelet configuration parameters",
							Ref:         ref("./apis/datadoghq/v1alpha1.KubeletConfig"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.CRISocketConfig", "./apis/datadoghq/v1alpha1.ConfigDirSpec", "./apis/datadoghq/v1alpha1.DogstatsdConfig", "./apis/datadoghq/v1alpha1.KubeletConfig", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.PodSecurityContext", "k8s.io/api/core/v1.Probe", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration", "k8s.io/api/core/v1.Volume", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema__apis_datadoghq_v1alpha1_OrchestratorExplorerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrchestratorExplorerConfig contains the orchestrator explorer configuration. The orchestratorExplorer runs in the process-agent and DCA.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this to activate live Kubernetes monitoring. See also: https://docs.datadoghq.com/infrastructure/livecontainers/#kubernetes-resources",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"conf": {
						SchemaProps: spec.SchemaProps{
							Description: "To override the configuration for the default Orchestrator Explorer check. Must point to a ConfigMap containing a valid cluster check configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
					"clusterCheck": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterCheck configures the Orchestrator Explorer check as a cluster check.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"scrubbing": {
						SchemaProps: spec.SchemaProps{
							Description: "Option to disable scrubbing of sensitive container data (passwords, tokens, etc. ).",
							Ref:         ref("./apis/datadoghq/v1alpha1.Scrubbing"),
						},
					},
					"additionalEndpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "Additional endpoints for shipping the collected data as json in the form of {\"https://process.agent.datadoghq.com\": [\"apikey1\", ...], ...}'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ddUrl": {
						SchemaProps: spec.SchemaProps{
							Description: "Set this for the Datadog endpoint for the orchestrator explorer",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"extraTags": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Additional tags for the collected data in the form of `a b c` Difference to DD_TAGS: this is a cluster agent option that is used to define custom cluster tags",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.CustomConfigSpec", "./apis/datadoghq/v1alpha1.Scrubbing"},
	}
}

func schema__apis_datadoghq_v1alpha1_ProcessSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "ProcessSpec contains the Process Agent configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable the Process Agent container. See also: https://docs.datadoghq.com/infrastructure/process/?tab=kubernetes#installation",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"processCollectionEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "false (default): Only collect containers if available. true: collect process information as well. Note: If enabled, /etc/passwd is automatically mounted to allow username resolution.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog Agent supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the Process Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog Process Agent resource requests and limits. Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class. See also: http://kubernetes.io/docs/user-guide/compute-resources/",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for Process Agent container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema__apis_datadoghq_v1alpha1_PrometheusScrapeConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PrometheusScrapeConfig allows configuration of the Prometheus Autodiscovery feature.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable autodiscovering pods and services exposing prometheus metrics.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"serviceEndpoints": {
						SchemaProps: spec.SchemaProps{
							Description: "ServiceEndpoints enables generating dedicated checks for service endpoints.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"additionalConfigs": {
						SchemaProps: spec.SchemaProps{
							Description: "AdditionalConfigs allows adding advanced prometheus check configurations with custom discovery rules.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_RbacConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RbacConfig contains RBAC configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"create": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to configure RBAC resources creation.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"serviceAccountName": {
						SchemaProps: spec.SchemaProps{
							Description: "Used to set up the service account name to use. Ignored if the field Create is true.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_RuntimeSecuritySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "RuntimeSecuritySpec contains configuration for runtime security features.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enables runtime security features.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"policiesDir": {
						SchemaProps: spec.SchemaProps{
							Description: "ConfigDir containing security policies.",
							Ref:         ref("./apis/datadoghq/v1alpha1.ConfigDirSpec"),
						},
					},
					"syscallMonitor": {
						SchemaProps: spec.SchemaProps{
							Description: "Syscall monitor configuration.",
							Ref:         ref("./apis/datadoghq/v1alpha1.SyscallMonitorSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.ConfigDirSpec", "./apis/datadoghq/v1alpha1.SyscallMonitorSpec"},
	}
}

func schema__apis_datadoghq_v1alpha1_Secret(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Secret contains a secret name and an included key.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"secretName": {
						SchemaProps: spec.SchemaProps{
							Description: "SecretName is the name of the secret.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"keyName": {
						SchemaProps: spec.SchemaProps{
							Description: "KeyName is the key of the secret to use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"secretName"},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_SecuritySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SecuritySpec contains the Security Agent configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"compliance": {
						SchemaProps: spec.SchemaProps{
							Description: "Compliance configuration.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.ComplianceSpec"),
						},
					},
					"runtime": {
						SchemaProps: spec.SchemaProps{
							Description: "Runtime security configuration.",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.RuntimeSecuritySpec"),
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog Security Agent supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the Security Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog Security Agent resource requests and limits. Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class. See also: http://kubernetes.io/docs/user-guide/compute-resources/",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for Security Agent container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.ComplianceSpec", "./apis/datadoghq/v1alpha1.RuntimeSecuritySpec", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.VolumeMount"},
	}
}

func schema__apis_datadoghq_v1alpha1_SyscallMonitorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SyscallMonitorSpec contains configuration for syscall monitor.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enabled enables syscall monitor",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_SystemProbeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "SystemProbeSpec contains the SystemProbe Agent configuration.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable this to activate live process monitoring. Note: /etc/passwd is automatically mounted to allow username resolution. See also: https://docs.datadoghq.com/infrastructure/process/?tab=kubernetes#installation",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"secCompRootPath": {
						SchemaProps: spec.SchemaProps{
							Description: "SecCompRootPath specify the seccomp profile root directory.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secCompCustomProfileConfigMap": {
						SchemaProps: spec.SchemaProps{
							Description: "SecCompCustomProfileConfigMap specify a pre-existing ConfigMap containing a custom SecComp profile. This ConfigMap must contain a file named system-probe-seccomp.json.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"secCompProfileName": {
						SchemaProps: spec.SchemaProps{
							Description: "SecCompProfileName specify a seccomp profile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"appArmorProfileName": {
						SchemaProps: spec.SchemaProps{
							Description: "AppArmorProfileName specify a apparmor profile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conntrackEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "ConntrackEnabled enable the system-probe agent to connect to the netlink/conntrack subsystem to add NAT information to connection data. See also: http://conntrack-tools.netfilter.org/",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"bpfDebugEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "BPFDebugEnabled logging for kernel debug.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"debugPort": {
						SchemaProps: spec.SchemaProps{
							Description: "DebugPort Specify the port to expose pprof and expvar for system-probe agent.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"enableTCPQueueLength": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableTCPQueueLength enables the TCP queue length eBPF-based check.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableOOMKill": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableOOMKill enables the OOM kill eBPF-based check.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"collectDNSStats": {
						SchemaProps: spec.SchemaProps{
							Description: "CollectDNSStats enables DNS stat collection.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"customConfig": {
						SchemaProps: spec.SchemaProps{
							Description: "Enable custom configuration for system-probe, corresponding to the system-probe.yaml config file. This custom configuration has less priority than all settings above.",
							Ref:         ref("./apis/datadoghq/v1alpha1.CustomConfigSpec"),
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The Datadog SystemProbe supports many environment variables. See also: https://docs.datadoghq.com/agent/docker/?tab=standard#environment-variables",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"volumeMounts": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"name",
									"mountPath",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Specify additional volume mounts in the Security Agent container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/api/core/v1.VolumeMount"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Datadog SystemProbe resource requests and limits. Make sure to keep requests and limits equal to keep the pods in the Guaranteed QoS class. See also: http://kubernetes.io/docs/user-guide/compute-resources/",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"command": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Command allows the specification of custom entrypoint for System Probe container",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"args": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Args allows the specification of extra args to `Command` parameter",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"securityContext": {
						SchemaProps: spec.SchemaProps{
							Description: "You can modify the security context used to run the containers by modifying the label type.",
							Ref:         ref("k8s.io/api/core/v1.SecurityContext"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.CustomConfigSpec", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.SecurityContext", "k8s.io/api/core/v1.VolumeMount"},
	}
}
