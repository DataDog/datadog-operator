//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Unless explicitly stated otherwise all files in this repository are licensed
// under the Apache License Version 2.0.
// This product includes software developed at Datadog (https://www.datadoghq.com/).
// Copyright 2016-present Datadog, Inc.

// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	common "k8s.io/kube-openapi/pkg/common"
	spec "k8s.io/kube-openapi/pkg/validation/spec"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./apis/datadoghq/v1alpha1.DatadogAgentProfile":                   schema__apis_datadoghq_v1alpha1_DatadogAgentProfile(ref),
		"./apis/datadoghq/v1alpha1.DatadogAgentProfileStatus":             schema__apis_datadoghq_v1alpha1_DatadogAgentProfileStatus(ref),
		"./apis/datadoghq/v1alpha1.DatadogMetric":                         schema__apis_datadoghq_v1alpha1_DatadogMetric(ref),
		"./apis/datadoghq/v1alpha1.DatadogMetricCondition":                schema__apis_datadoghq_v1alpha1_DatadogMetricCondition(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitor":                        schema__apis_datadoghq_v1alpha1_DatadogMonitor(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorCondition":               schema__apis_datadoghq_v1alpha1_DatadogMonitorCondition(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorControllerOptions":       schema__apis_datadoghq_v1alpha1_DatadogMonitorControllerOptions(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorDowntimeStatus":          schema__apis_datadoghq_v1alpha1_DatadogMonitorDowntimeStatus(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorOptions":                 schema__apis_datadoghq_v1alpha1_DatadogMonitorOptions(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorOptionsThresholdWindows": schema__apis_datadoghq_v1alpha1_DatadogMonitorOptionsThresholdWindows(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorOptionsThresholds":       schema__apis_datadoghq_v1alpha1_DatadogMonitorOptionsThresholds(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorSpec":                    schema__apis_datadoghq_v1alpha1_DatadogMonitorSpec(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorStatus":                  schema__apis_datadoghq_v1alpha1_DatadogMonitorStatus(ref),
		"./apis/datadoghq/v1alpha1.DatadogMonitorTriggeredState":          schema__apis_datadoghq_v1alpha1_DatadogMonitorTriggeredState(ref),
		"./apis/datadoghq/v1alpha1.DatadogSLO":                            schema__apis_datadoghq_v1alpha1_DatadogSLO(ref),
		"./apis/datadoghq/v1alpha1.DatadogSLOControllerOptions":           schema__apis_datadoghq_v1alpha1_DatadogSLOControllerOptions(ref),
		"./apis/datadoghq/v1alpha1.DatadogSLOQuery":                       schema__apis_datadoghq_v1alpha1_DatadogSLOQuery(ref),
		"./apis/datadoghq/v1alpha1.DatadogSLOSpec":                        schema__apis_datadoghq_v1alpha1_DatadogSLOSpec(ref),
		"./apis/datadoghq/v1alpha1.DatadogSLOStatus":                      schema__apis_datadoghq_v1alpha1_DatadogSLOStatus(ref),
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentProfile(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentProfile is the Schema for the datadogagentprofiles API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogAgentProfileSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogAgentProfileStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogAgentProfileSpec", "./apis/datadoghq/v1alpha1.DatadogAgentProfileStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogAgentProfileStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogAgentProfileStatus defines the observed state of DatadogAgentProfile",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"lastUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "LastUpdate is the last time the status was updated.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"currentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentHash is the stored hash of the DatadogAgentProfile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represents the latest available observations of a DatadogAgentProfile's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"valid": {
						SchemaProps: spec.SchemaProps{
							Description: "Valid shows if the DatadogAgentProfile has a valid config spec.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"applied": {
						SchemaProps: spec.SchemaProps{
							Description: "Applied shows whether the DatadogAgentProfile conflicts with an existing DatadogAgentProfile.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Condition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMetric(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMetric allows autoscaling on arbitrary Datadog query",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMetricSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMetricStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMetricSpec", "./apis/datadoghq/v1alpha1.DatadogMetricStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMetricCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMetricCondition describes the state of a DatadogMetric at a certain point.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of DatadogMetric condition.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitor(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitor allows to define and manage Monitors from your Kubernetes Cluster",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMonitorSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMonitorStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMonitorSpec", "./apis/datadoghq/v1alpha1.DatadogMonitorStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorCondition describes the current state of a DatadogMonitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type of DatadogMonitor condition",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status of the condition, one of True, False, Unknown.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition transitioned from one status to another.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"lastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "Last time the condition was updated.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"reason": {
						SchemaProps: spec.SchemaProps{
							Description: "The reason for the condition's last transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "A human readable message indicating details about the transition.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"type", "status"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorControllerOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorControllerOptions defines options in the DatadogMonitor controller",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"disableRequiredTags": {
						SchemaProps: spec.SchemaProps{
							Description: "DisableRequiredTags disables the automatic addition of required tags to monitors.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorDowntimeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorDowntimeStatus represents the downtime status of a DatadogMonitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"isDowntimed": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"boolean"},
							Format: "",
						},
					},
					"downtimeId": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"integer"},
							Format: "int32",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorOptions define the optional parameters of a monitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"enableLogsSample": {
						SchemaProps: spec.SchemaProps{
							Description: "A Boolean indicating whether to send a log sample when the log monitor triggers.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"escalationMessage": {
						SchemaProps: spec.SchemaProps{
							Description: "A message to include with a re-notification.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"evaluationDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Time (in seconds) to delay evaluation, as a non-negative integer. For example, if the value is set to 300 (5min), the timeframe is set to last_5m and the time is 7:00, the monitor evaluates data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor always has data during evaluation.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"includeTags": {
						SchemaProps: spec.SchemaProps{
							Description: "A Boolean indicating whether notifications from this monitor automatically inserts its triggering tags into the title.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"groupbySimpleMonitor": {
						SchemaProps: spec.SchemaProps{
							Description: "A Boolean indicating whether the log alert monitor triggers a single alert or multiple alerts when any group breaches a threshold.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"locked": {
						SchemaProps: spec.SchemaProps{
							Description: "DEPRECATED: Whether or not the monitor is locked (only editable by creator and admins). Use `restricted_roles` instead.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"newGroupDelay": {
						SchemaProps: spec.SchemaProps{
							Description: "Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non negative integer.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"noDataTimeframe": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of minutes before a monitor notifies after data stops reporting. Datadog recommends at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks. If omitted, 2x the evaluation timeframe is used for metric alerts, and 24 hours is used for service checks.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"notificationPresetName": {
						SchemaProps: spec.SchemaProps{
							Description: "An enum that toggles the display of additional content sent in the monitor notification.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"notifyAudit": {
						SchemaProps: spec.SchemaProps{
							Description: "A Boolean indicating whether tagged users are notified on changes to this monitor.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"notifyBy": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "A string indicating the granularity a monitor alerts on. Only available for monitors with groupings. For instance, a monitor grouped by cluster, namespace, and pod can be configured to only notify on each new cluster violating the alert conditions by setting notify_by to [\"cluster\"]. Tags mentioned in notify_by must be a subset of the grouping tags in the query. For example, a query grouped by cluster and namespace cannot notify on region. Setting notify_by to [*] configures the monitor to notify as a simple-alert.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"notifyNoData": {
						SchemaProps: spec.SchemaProps{
							Description: "A Boolean indicating whether this monitor notifies when data stops reporting.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"onMissingData": {
						SchemaProps: spec.SchemaProps{
							Description: "An enum that controls how groups or monitors are treated if an evaluation does not return data points. The default option results in different behavior depending on the monitor query type. For monitors using Count queries, an empty monitor evaluation is treated as 0 and is compared to the threshold conditions. For monitors using any query type other than Count, for example Gauge, Measure, or Rate, the monitor shows the last known status. This option is only available for APM Trace Analytics, Audit Trail, CI, Error Tracking, Event, Logs, and RUM monitors",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"renotifyInterval": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of minutes after the last notification before a monitor re-notifies on the current status. It only re-notifies if it’s not resolved.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"renotifyOccurrences": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of times re-notification messages should be sent on the current status at the provided re-notification interval.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"renotifyStatuses": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "The types of statuses for which re-notification messages should be sent. Valid values are alert, warn, no data.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"requireFullWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "A Boolean indicating whether this monitor needs a full window of data before it’s evaluated. We highly recommend you set this to false for sparse metrics, otherwise some evaluations are skipped. Default is false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"timeoutH": {
						SchemaProps: spec.SchemaProps{
							Description: "The number of hours of the monitor not reporting data before it automatically resolves from a triggered state.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"thresholds": {
						SchemaProps: spec.SchemaProps{
							Description: "A struct of the different monitor threshold values.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogMonitorOptionsThresholds"),
						},
					},
					"thresholdWindows": {
						SchemaProps: spec.SchemaProps{
							Description: "A struct of the alerting time window options.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogMonitorOptionsThresholdWindows"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMonitorOptionsThresholdWindows", "./apis/datadoghq/v1alpha1.DatadogMonitorOptionsThresholds"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorOptionsThresholdWindows(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorOptionsThresholdWindows is a struct of the alerting time window options",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"recoveryWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes how long an anomalous metric must be normal before the alert recovers.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"triggerWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "Describes how long a metric must be anomalous before an alert triggers.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorOptionsThresholds(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorOptionsThresholds is a struct of the different monitor threshold values",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"critical": {
						SchemaProps: spec.SchemaProps{
							Description: "The monitor CRITICAL threshold.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"criticalRecovery": {
						SchemaProps: spec.SchemaProps{
							Description: "The monitor CRITICAL recovery threshold.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"ok": {
						SchemaProps: spec.SchemaProps{
							Description: "The monitor OK threshold.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"unknown": {
						SchemaProps: spec.SchemaProps{
							Description: "The monitor UNKNOWN threshold.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"warning": {
						SchemaProps: spec.SchemaProps{
							Description: "The monitor WARNING threshold.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"warningRecovery": {
						SchemaProps: spec.SchemaProps{
							Description: "The monitor WARNING recovery threshold.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorSpec defines the desired state of DatadogMonitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the monitor name",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"message": {
						SchemaProps: spec.SchemaProps{
							Description: "Message is a message to include with notifications for this monitor",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Priority is an integer from 1 (high) to 5 (low) indicating alert severity",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"query": {
						SchemaProps: spec.SchemaProps{
							Description: "Query is the Datadog monitor query",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"restrictedRoles": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "RestrictedRoles is a list of unique role identifiers to define which roles are allowed to edit the monitor. `restricted_roles` is the successor of `locked`. For more information about `locked` and `restricted_roles`, see the [monitor options docs](https://docs.datadoghq.com/monitors/guide/monitor_api_options/#permissions-options).",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"tags": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Tags is the monitor tags associated with your monitor",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the monitor type",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"options": {
						SchemaProps: spec.SchemaProps{
							Description: "Options are the optional parameters associated with your monitor",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogMonitorOptions"),
						},
					},
					"controllerOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "ControllerOptions are the optional parameters in the DatadogMonitor controller",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogMonitorControllerOptions"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMonitorControllerOptions", "./apis/datadoghq/v1alpha1.DatadogMonitorOptions"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorStatus defines the observed state of DatadogMonitor",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions Represents the latest available observations of a DatadogMonitor's current state.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMonitorCondition"),
									},
								},
							},
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is the monitor ID generated in Datadog",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"creator": {
						SchemaProps: spec.SchemaProps{
							Description: "Creator is the identify of the monitor creator",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"created": {
						SchemaProps: spec.SchemaProps{
							Description: "Created is the time the monitor was created",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"monitorState": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitorState is the overall state of monitor",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"monitorLastForceSyncTime": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitorLastForceSyncTime is the last time the API monitor was last force synced with the DatadogMonitor resource",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"monitorStateLastUpdateTime": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitorStateLastUpdateTime is the last time the monitor state updated",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"monitorStateLastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitorStateLastTransitionTime is the last time the monitor state changed",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"syncStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitorStateSyncStatus shows the health of syncing the monitor state to Datadog",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"triggeredState": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"monitorGroup",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "TriggeredState only includes details for monitor groups that are triggering",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("./apis/datadoghq/v1alpha1.DatadogMonitorTriggeredState"),
									},
								},
							},
						},
					},
					"downtimeStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "DowntimeStatus defines whether the monitor is downtimed",
							Default:     map[string]interface{}{},
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogMonitorDowntimeStatus"),
						},
					},
					"primary": {
						SchemaProps: spec.SchemaProps{
							Description: "Primary defines whether the monitor is managed by the Kubernetes custom resource (true) or outside Kubernetes (false)",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"currentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentHash tracks the hash of the current DatadogMonitorSpec to know if the Spec has changed and needs an update",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogMonitorCondition", "./apis/datadoghq/v1alpha1.DatadogMonitorDowntimeStatus", "./apis/datadoghq/v1alpha1.DatadogMonitorTriggeredState", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogMonitorTriggeredState(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogMonitorTriggeredState represents the details of a triggering DatadogMonitor The DatadogMonitor is triggering if one of its groups is in Alert, Warn, or No Data",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"monitorGroup": {
						SchemaProps: spec.SchemaProps{
							Description: "MonitorGroup is the name of the triggering group",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"state": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"lastTransitionTime": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
				Required: []string{"monitorGroup"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogSLO(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogSLO allows a user to define and manage datadog SLOs from Kubernetes cluster.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogSLOSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Default: map[string]interface{}{},
							Ref:     ref("./apis/datadoghq/v1alpha1.DatadogSLOStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogSLOSpec", "./apis/datadoghq/v1alpha1.DatadogSLOStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogSLOControllerOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogSLOControllerOptions defines options in the DatadogSLO controller.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"disableRequiredTags": {
						SchemaProps: spec.SchemaProps{
							Description: "DisableRequiredTags disables the automatic addition of required tags to SLOs.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogSLOQuery(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"numerator": {
						SchemaProps: spec.SchemaProps{
							Description: "Numerator is a Datadog metric query for good events.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"denominator": {
						SchemaProps: spec.SchemaProps{
							Description: "Denominator is a Datadog metric query for total (valid) events.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"numerator", "denominator"},
			},
		},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogSLOSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Type: []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name is the name of the service level objective.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description is a user-defined description of the service level objective. Always included in service level objective responses (but may be null). Optional in create/update requests.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"groups": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Groups is a list of (up to 100) monitor groups that narrow the scope of a monitor service level objective. Included in service level objective responses if it is not empty. Optional in create/update requests for monitor service level objectives, but may only be used when the length of the monitor_ids field is one.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"monitorIDs": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "MonitorIDs is a list of monitor IDs that defines the scope of a monitor service level objective. Required if type is monitor.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: 0,
										Type:    []string{"integer"},
										Format:  "int64",
									},
								},
							},
						},
					},
					"tags": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "set",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Tags is a list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: "",
										Type:    []string{"string"},
										Format:  "",
									},
								},
							},
						},
					},
					"query": {
						SchemaProps: spec.SchemaProps{
							Description: "Query is the query for a metric-based SLO. Required if type is metric. Note that only the `sum by` aggregator is allowed, which sums all request counts. `Average`, `max`, nor `min` request aggregators are not supported.",
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogSLOQuery"),
						},
					},
					"type": {
						SchemaProps: spec.SchemaProps{
							Description: "Type is the type of the service level objective.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"timeframe": {
						SchemaProps: spec.SchemaProps{
							Description: "The SLO time window options.",
							Default:     "",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"targetThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "TargetThreshold is the target threshold such that when the service level indicator is above this threshold over the given timeframe, the objective is being met.",
							Default:     map[string]interface{}{},
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"warningThreshold": {
						SchemaProps: spec.SchemaProps{
							Description: "WarningThreshold is a optional warning threshold such that when the service level indicator is below this value for the given threshold, but above the target threshold, the objective appears in a \"warning\" state. This value must be greater than the target threshold.",
							Ref:         ref("k8s.io/apimachinery/pkg/api/resource.Quantity"),
						},
					},
					"controllerOptions": {
						SchemaProps: spec.SchemaProps{
							Description: "ControllerOptions are the optional parameters in the DatadogSLO controller",
							Ref:         ref("./apis/datadoghq/v1alpha1.DatadogSLOControllerOptions"),
						},
					},
				},
				Required: []string{"name", "type", "timeframe", "targetThreshold"},
			},
		},
		Dependencies: []string{
			"./apis/datadoghq/v1alpha1.DatadogSLOControllerOptions", "./apis/datadoghq/v1alpha1.DatadogSLOQuery", "k8s.io/apimachinery/pkg/api/resource.Quantity"},
	}
}

func schema__apis_datadoghq_v1alpha1_DatadogSLOStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "DatadogSLOStatus defines the observed state of a DatadogSLO.",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-map-keys": []interface{}{
									"type",
								},
								"x-kubernetes-list-type": "map",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions represents the latest available observations of the state of a DatadogSLO.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Default: map[string]interface{}{},
										Ref:     ref("k8s.io/apimachinery/pkg/apis/meta/v1.Condition"),
									},
								},
							},
						},
					},
					"id": {
						SchemaProps: spec.SchemaProps{
							Description: "ID is the SLO ID generated in Datadog.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"creator": {
						SchemaProps: spec.SchemaProps{
							Description: "Creator is the identity of the SLO creator.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"created": {
						SchemaProps: spec.SchemaProps{
							Description: "Created is the time the SLO was created.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"syncStatus": {
						SchemaProps: spec.SchemaProps{
							Description: "SyncStatus shows the health of syncing the SLO state to Datadog.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"lastForceSyncTime": {
						SchemaProps: spec.SchemaProps{
							Description: "LastForceSyncTime is the last time the API SLO was last force synced with the DatadogSLO resource.",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"currentHash": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentHash tracks the hash of the current DatadogSLOSpec to know if the Spec has changed and needs an update.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Condition", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
