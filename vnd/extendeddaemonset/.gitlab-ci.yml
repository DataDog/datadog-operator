image: registry.ddbuild.io/images/mirror/golang:1.21
variables:
  GO111MODULE: "on"
  PROJECTNAME: "extendeddaemonset"
  PROJECTNAME_CHECK: "extendeddaemonset-check"
  GOPATH: "$CI_PROJECT_DIR/.cache"
  TARGET_TAG: v$CI_PIPELINE_ID-$CI_COMMIT_SHORT_SHA
  BUILD_DOCKER_REGISTRY: "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci"
  JOB_DOCKER_IMAGE: "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci-containers-project:v2.0.0"
  DOCKER_REGISTRY_LOGIN_SSM_KEY: docker_hub_login
  DOCKER_REGISTRY_PWD_SSM_KEY: docker_hub_pwd
  DOCKER_REGISTRY_URL: docker.io
cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - .cache
  policy: pull-push

stages:
  - build
  - test
  - image
  - release

before_script:
  - mkdir -p .cache
  - make install-tools

build:
  stage: build
  tags: [ "runner:main", "size:large" ]
  script:
    - make build

tests:
  stage: test
  tags: [ "runner:main", "size:large" ]
  script:
  - make test

generate_code:
  stage: test
  tags: [ "runner:main", "size:large" ]
  script:
  - make generate manifests
  - git diff --exit-code


build_eds_image_amd64:
  stage: image
  tags: 
    - "arch:amd64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: amd64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG=$TARGET_IMAGE make docker-build-push-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi

build_eds_image_arm64:
  stage: image
  tags: 
    - "arch:arm64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: arm64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG=$TARGET_IMAGE make docker-build-push-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi


build_eds_check_image_amd64:
  stage: image
  tags: 
    - "arch:amd64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: amd64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:$CI_COMMIT_TAG-amd64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG_CHECK=$TARGET_IMAGE make docker-build-push-check-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi

build_eds_check_image_arm64:
  stage: image
  tags: 
    - "arch:arm64"
  image: $JOB_DOCKER_IMAGE
  variables:
    GOARCH: arm64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME_CHECK:$CI_COMMIT_TAG-arm64
  before_script:
    # DockerHub login for build to limit rate limit when pulling base images
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_LOGIN_SSM_KEY --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.extendeddaemonset.$DOCKER_REGISTRY_PWD_SSM_KEY --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin "$DOCKER_REGISTRY_URL"
  script:
    - IMG_CHECK=$TARGET_IMAGE make docker-build-push-check-ci
    - if [ -n "$CI_COMMIT_TAG" ]; then docker buildx imagetools create $TARGET_IMAGE --tag $RELEASE_IMAGE; fi


publish_public_main:
  stage: release
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    IMG_DESTINATIONS: $PROJECTNAME:main
    IMG_SIGNING: "false"

publish_public_tag:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: $PROJECTNAME:$CI_COMMIT_TAG
    IMG_SIGNING: "false"

publish_public_latest:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: $PROJECTNAME:latest
    IMG_SIGNING: "false"

trigger_internal_eds_image:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
    - when: never
  needs:
    - build_eds_image_arm64
    - build_eds_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3
    IMAGE_NAME: $PROJECTNAME
    RELEASE_TAG: ${CI_COMMIT_REF_SLUG}
    BUILD_TAG: ${CI_COMMIT_REF_SLUG}
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"

trigger_internal_eds_check_image:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
    - when: never
  needs:
    - build_eds_check_image_arm64
    - build_eds_check_image_amd64
  trigger:
    project: DataDog/images
    branch: master
    strategy: depend
  variables:
    IMAGE_VERSION: tmpl-v3
    IMAGE_NAME: $PROJECTNAME_CHECK
    RELEASE_TAG: ${CI_COMMIT_REF_SLUG}
    BUILD_TAG: ${CI_COMMIT_REF_SLUG}
    TMPL_SRC_IMAGE: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
    RELEASE_STAGING: "true"
    RELEASE_PROD: "true"
