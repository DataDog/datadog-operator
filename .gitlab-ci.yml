image: golang:1.15
variables:
  GO111MODULE: "on"
  PROJECTNAME: "datadog-operator"
  GOPATH: "$CI_PROJECT_DIR/.cache"
  BUILD_DOCKER_REGISTRY: "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci"
cache: &global_cache
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .cache
  policy: pull-push

stages:
  - build
  - test
  - image
  - intermediate
  - release

build:
  stage: build
  tags: ["runner:main", "size:large"]
  before_script:
    - mkdir -p .cache
    - make install-tools
  script:
    - make build

unit_tests:
  stage: test
  tags: ["runner:main", "size:large"]
  before_script:
    - mkdir -p .cache
    - make install-tools
  script:
    - make test

generate_code:
  stage: test
  tags: ["runner:main", "size:large"]
  before_script:
    - mkdir -p .cache
    - make install-tools
  script:
    - make generate manifests
    - git diff --exit-code

build_image_amd64:
  stage: image
  tags: ["runner:docker", "size:large"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:v2718644-9ce6565-18.09.6-py3
  variables:
    GOARCH: amd64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64
  script:
    - IMG=$TARGET_IMAGE make docker-build-ci docker-push
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag $TARGET_IMAGE $RELEASE_IMAGE && docker push $RELEASE_IMAGE; fi

build_image_arm64:
  stage: image
  tags: ["runner:docker-arm", "platform:arm64"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:v2718787-3888eda-18.09.6-arm64-py3
  variables:
    GOARCH: arm64
    TARGET_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    RELEASE_IMAGE: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
  script:
    - IMG=$TARGET_IMAGE make docker-build-ci docker-push
    - if [ -n "$CI_COMMIT_TAG" ]; then docker tag $TARGET_IMAGE $RELEASE_IMAGE && docker push $RELEASE_IMAGE; fi

publish_public_master:
  stage: release
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}-arm64
    IMG_DESTINATIONS: operator:master
    IMG_SIGNING: "false"

# Before Gitlab 13.5 trigger with `when:manual` does not work
# Workaround it by having a manual intermediate job
intermediate_latest:
  stage: intermediate
  tags: ["runner:main", "size:large"]
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: false
    - when: never
  script:
    echo "OK"

# Before Gitlab 13.5 trigger with `when:manual` does not work
# Workaround it by having a manual intermediate job
intermediate_tag:
  stage: intermediate
  tags: ["runner:main", "size:large"]
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
      allow_failure: false
    - when: never
  script:
    echo "OK"

publish_public_tag:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  needs:
    - intermediate_tag
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: operator:$CI_COMMIT_TAG
    IMG_SIGNING: "false"

publish_public_latest:
  stage: release
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  needs:
    - intermediate_latest
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_SOURCES: $BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-amd64,$BUILD_DOCKER_REGISTRY/$PROJECTNAME:$CI_COMMIT_TAG-arm64
    IMG_DESTINATIONS: operator:latest
    IMG_SIGNING: "false"
