package fake

import (
	"testing"

	common "github.com/DataDog/datadog-operator/controllers/datadogagent/common"
	merger "github.com/DataDog/datadog-operator/controllers/datadogagent/merger"

	v1 "k8s.io/api/core/v1"
)

// VolumeManager is an autogenerated mock type for the VolumeManager type
type VolumeManager struct {
	VolumeByC      map[common.ContainerName][]*v1.Volume
	VolumeMountByC map[common.ContainerName][]*v1.VolumeMount

	t testing.TB
}

// AddVolume provides a mock function with given fields: volume, volumeMount
func (_m *VolumeManager) AddVolume(volume *v1.Volume, volumeMount *v1.VolumeMount) {
	_m.VolumeByC[AllContainers] = append(_m.VolumeByC[AllContainers], volume)
	_m.VolumeMountByC[AllContainers] = append(_m.VolumeMountByC[AllContainers], volumeMount)
}

// AddVolumeToContainer provides a mock function with given fields: volume, volumeMount, containerName
func (_m *VolumeManager) AddVolumeToContainer(volume *v1.Volume, volumeMount *v1.VolumeMount, containerName common.ContainerName) {
	_m.VolumeByC[containerName] = append(_m.VolumeByC[containerName], volume)
	_m.VolumeMountByC[containerName] = append(_m.VolumeMountByC[containerName], volumeMount)
}

// AddVolumeToContainerWithMergeFunc provides a mock function with given fields: volume, volumeMount, containerName, volumeMergeFunc, volumeMountMergeFunc
func (_m *VolumeManager) AddVolumeToContainerWithMergeFunc(volume *v1.Volume, volumeMount *v1.VolumeMount, containerName common.ContainerName, volumeMergeFunc merger.VolumeMergeFunction, volumeMountMergeFunc merger.VolumeMountMergeFunction) error {
	if err := _m.volumeMerge(containerName, volume, volumeMergeFunc); err != nil {
		return err
	}
	return _m.volumeMountMerge(containerName, volumeMount, volumeMountMergeFunc)
}

func (_m *VolumeManager) volumeMerge(containerName common.ContainerName, volume *v1.Volume, volumeMergeFunc merger.VolumeMergeFunction) error {
	found := false
	idFound := 0
	for id, v := range _m.VolumeByC[containerName] {
		if volume.Name == v.Name {
			found = true
			idFound = id
		}
	}

	if found {
		var err error
		volume, err = volumeMergeFunc(_m.VolumeByC[containerName][idFound], volume)
		_m.VolumeByC[containerName][idFound] = volume
		return err
	}

	_m.VolumeByC[containerName] = append(_m.VolumeByC[containerName], volume)
	return nil
}

func (_m *VolumeManager) volumeMountMerge(containerName common.ContainerName, volume *v1.VolumeMount, volumeMergeFunc merger.VolumeMountMergeFunction) error {
	found := false
	idFound := 0
	for id, v := range _m.VolumeMountByC[containerName] {
		if volume.Name == v.Name {
			found = true
			idFound = id
		}
	}

	if found {
		var err error
		volume, err = volumeMergeFunc(_m.VolumeMountByC[containerName][idFound], volume)
		_m.VolumeMountByC[containerName][idFound] = volume
		return err
	}

	_m.VolumeMountByC[containerName] = append(_m.VolumeMountByC[containerName], volume)
	return nil
}

// AddVolumeWithMergeFunc provides a mock function with given fields: volume, volumeMount, volumeMergeFunc, volumeMountMergeFunc
func (_m *VolumeManager) AddVolumeWithMergeFunc(volume *v1.Volume, volumeMount *v1.VolumeMount, volumeMergeFunc merger.VolumeMergeFunction, volumeMountMergeFunc merger.VolumeMountMergeFunction) error {
	return _m.AddVolumeToContainerWithMergeFunc(volume, volumeMount, AllContainers, volumeMergeFunc, volumeMountMergeFunc)
}

// NewFakeVolumeManager creates a new instance of VolumeManager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeVolumeManager(t testing.TB) *VolumeManager {
	return &VolumeManager{
		VolumeByC:      make(map[common.ContainerName][]*v1.Volume),
		VolumeMountByC: make(map[common.ContainerName][]*v1.VolumeMount),
		t:              t,
	}
}
