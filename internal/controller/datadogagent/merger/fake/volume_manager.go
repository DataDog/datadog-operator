package fake

import (
	"testing"

	merger "github.com/DataDog/datadog-operator/internal/controller/datadogagent/merger"

	v1 "k8s.io/api/core/v1"
)

// VolumeManager is an autogenerated mock type for the VolumeManager type
type VolumeManager struct {
	Volumes []*v1.Volume

	t testing.TB
}

// AddVolume provides a mock function with given fields: volume, volumeMount
func (_m *VolumeManager) AddVolume(volume *v1.Volume) {
	_m.Volumes = append(_m.Volumes, volume)
}

// AddVolumeWithMergeFunc provides a mock function with given fields: volume, volumeMount, containerName, volumeMergeFunc, volumeMountMergeFunc
func (_m *VolumeManager) AddVolumeWithMergeFunc(volume *v1.Volume, volumeMergeFunc merger.VolumeMergeFunction) error {
	if err := _m.volumeMerge(volume, volumeMergeFunc); err != nil {
		return err
	}
	return nil
}

func (_m *VolumeManager) volumeMerge(volume *v1.Volume, volumeMergeFunc merger.VolumeMergeFunction) error {
	found := false
	idFound := 0
	for id, v := range _m.Volumes {
		if volume.Name == v.Name {
			found = true
			idFound = id
		}
	}

	if found {
		var err error
		volume, err = volumeMergeFunc(_m.Volumes[idFound], volume)
		_m.Volumes[idFound] = volume
		return err
	}

	_m.Volumes = append(_m.Volumes, volume)
	return nil
}

// NewFakeVolumeManager creates a new instance of VolumeManager. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewFakeVolumeManager(t testing.TB) *VolumeManager {
	return &VolumeManager{
		Volumes: []*v1.Volume{},
		t:       t,
	}
}
