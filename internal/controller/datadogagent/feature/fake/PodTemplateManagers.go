package fake

import (
	"testing"

	v1 "k8s.io/api/core/v1"

	"github.com/DataDog/datadog-operator/internal/controller/datadogagent/merger"
	mergerfake "github.com/DataDog/datadog-operator/internal/controller/datadogagent/merger/fake"
)

// PodTemplateManagers is an autogenerated mock type for the PodTemplateManagers type
type PodTemplateManagers struct {
	Tpl                v1.PodTemplateSpec
	EnvVarMgr          *mergerfake.EnvVarManager
	VolumeMgr          *mergerfake.VolumeManager
	VolumeMountMgr     *mergerfake.VolumeMountManager
	SecurityContextMgr *mergerfake.SecurityContextManager
	AnnotationMgr      *mergerfake.AnnotationManager
	PortMgr            *mergerfake.PortManager
}

// EnvVar provides a mock function with given fields:
func (_m *PodTemplateManagers) EnvVar() merger.EnvVarManager {
	return _m.EnvVarMgr
}

// PodTemplateSpec provides a mock function with given fields:
func (_m *PodTemplateManagers) PodTemplateSpec() *v1.PodTemplateSpec {
	return &_m.Tpl
}

// Volume provides a mock function with given fields:
func (_m *PodTemplateManagers) Volume() merger.VolumeManager {
	return _m.VolumeMgr
}

// VolumeMount provides a mock function with given fields:
func (_m *PodTemplateManagers) VolumeMount() merger.VolumeMountManager {
	return _m.VolumeMountMgr
}

// SecurityContext provides a mock function with given fields:
func (_m *PodTemplateManagers) SecurityContext() merger.SecurityContextManager {
	return _m.SecurityContextMgr
}

// Annotation provides a mock function with given fields:
func (_m *PodTemplateManagers) Annotation() merger.AnnotationManager {
	return _m.AnnotationMgr
}

// Port provides a mock function with given fields:
func (_m *PodTemplateManagers) Port() merger.PortManager {
	return _m.PortMgr
}

// NewPodTemplateManagers creates a new instance of PodTemplateManagers. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPodTemplateManagers(t testing.TB, podTpl v1.PodTemplateSpec) *PodTemplateManagers {
	return &PodTemplateManagers{
		Tpl:                podTpl,
		EnvVarMgr:          mergerfake.NewFakeEnvVarManager(t),
		VolumeMgr:          mergerfake.NewFakeVolumeManager(t),
		VolumeMountMgr:     mergerfake.NewFakeVolumeMountManager(t),
		SecurityContextMgr: mergerfake.NewFakeSecurityContextManager(t),
		AnnotationMgr:      mergerfake.NewFakeAnnotationManager(t),
		PortMgr:            mergerfake.NewFakePortManager(t),
	}
}
